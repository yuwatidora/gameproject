import sys

import pygame

import time

import random

def main():

    pygame.init()

    main_surface = pygame.display.set_mode((500,700))

    #initialize parameters before the loop

    #mummy parameters
    font = pygame.font.SysFont('Calibri',25,True,False)

    hitartifact = -1

    mummyxposchange = [0,0,0,0,0,0,0,0]
    
    n=[0,0,0,0,0,1,1,1]

    coffin_choose = random.sample(n,8)

    mummyx_change=[5,5,-5,5,5,-5,-5,-5]

    artifactx_pos = [280,130,330,180,330,30,430,440]

    artifacty_pos = [450,400,350,300,250,450,400,250]

    carry_artifact =[]

    life = 3

    score = 0

    level = (score//3) +10

    

    
        

    #COLORs
    BLACK = (0,0,0)

    WHITE = (255,255,255)

    GREEN = (0,255,0)

    RED   = (255,0,0)

    BLUE = (43,143,230)

    LIGHTBLUE = (175,217,254)

    BROWN = (185,117,47)


    #Colors of blocks-----------------

    #Color of stones
    colorstone =BLUE

    #Color of daggers
    colordagger= RED
    

    #Color of coffins
    colorcoffin = BROWN

    
    #Color of mummys
    colormummy = WHITE


    #Color of frog
    colorfrog = GREEN

    #Color of artifact
    colorartifact = LIGHTBLUE

    
    #Variables-------------------------
    
    
    #frog
    frog = pygame.rect.Rect(250,680,20,20)

    
    
    #artifact
    artifact = pygame.rect.Rect(600,250,10,10)
    artifact1 = pygame.rect.Rect(600,250,10,10)
    artifact2 = pygame.rect.Rect(600,250,10,10)
    artifact3 = pygame.rect.Rect(600,250,10,10)
    artifact4 = pygame.rect.Rect(600,250,10,10)
    artifact5 = pygame.rect.Rect(600,250,10,10)
    artifact6 = pygame.rect.Rect(600,250,10,10)
    artifact7 = pygame.rect.Rect(600,250,10,10)
    
    #daggers
    dagger = pygame.rect.Rect(0,640,70,20)
    
    dagger1 = pygame.rect.Rect(200,640,70,20)
    
    dagger2 = pygame.rect.Rect(400,620,70,20)
    
    dagger3 = pygame.rect.Rect(350,600,70,20)
    
    dagger4 = pygame.rect.Rect(400,580,70,20)
    
    dagger5 = pygame.rect.Rect(250,580,70,20)
    

    #stones
    stone=pygame.rect.Rect(0,60,40,40)

    stone1=pygame.rect.Rect(100,60,40,40)
    
    stone2=pygame.rect.Rect(450,60,40,40)
    
    stone3=pygame.rect.Rect(300,100,40,40)

    stone4=pygame.rect.Rect(450,100,40,40)

    stone5=pygame.rect.Rect(100,100,40,40)

    #mummys
    mummy = pygame.rect.Rect(0,450,20,50)
    
    mummy1 = pygame.rect.Rect(0,400,20,50)
    
    mummy2 = pygame.rect.Rect(480,350,20,50)
    
    mummy3 = pygame.rect.Rect(0,300,20,50)
    
    mummy4 = pygame.rect.Rect(0,250,20,50)
    
    mummy5 = pygame.rect.Rect(480,450,20,50)

    mummy6 = pygame.rect.Rect(480,400,20,50)

    mummy7 = pygame.rect.Rect(480,250,20,50)
    

    #coffins
    coffin = pygame.rect.Rect(250,450,30,50)
    coffin1 = pygame.rect.Rect(100 ,400,30,50)
    coffin2 = pygame.rect.Rect(300 ,350,30,50)
    coffin3 = pygame.rect.Rect(150 ,300,30,50)
    coffin4 = pygame.rect.Rect(300,250,30,50)
    coffin5 = pygame.rect.Rect(0,450,30,50)
    coffin6 = pygame.rect.Rect(400,400,30,50)
    coffin7 = pygame.rect.Rect(450,250,30,50)

   
    

    

    

    #Lists-------------------------------

    #-stone lists-
    stonelist=[stone, stone1, stone2]

    stone1list=[stone3, stone4, stone5]

    #-dagger lists-
    daggerlist=[dagger,dagger1, dagger2]

    dagger1list=[dagger3]

    dagger2list=[dagger4, dagger5]

    #artifact list-

    artifactlist = [artifact,artifact1,artifact2,artifact3,artifact4,artifact5,artifact6,artifact7]
    
    #-mummy list-
    mummylist=[mummy,mummy1,mummy2,mummy3,mummy4,mummy5,mummy6, mummy7]

    

    #coffin list-
    coffinlist=[coffin,coffin1,coffin2,coffin3,coffin4,coffin5,coffin6,coffin7]

    #goal list
    
    

    
    

    

    #Game loop------------------------------
    while True:

        for event in pygame.event.get():
             if event .type == pygame.QUIT:
                 pygame.quit()
                 sys.exit()
                 
             #Moving the frog-----------------------------------    
             if event.type == pygame.KEYDOWN:
                 
                 if event.key == pygame.K_LEFT:

                     frog.x-=20
                     
                     
                     if carry_artifact != []:

                         carry_artifact[0].x -=20

                 elif event.key== pygame.K_RIGHT:

                     frog.x+=20

                     if carry_artifact != []:
                         
                         carry_artifact[0].x += 20



                 elif event.key == pygame.K_DOWN:

                     frog.y+=20

                     if carry_artifact != []:

                         carry_artifact[0].y += 20



                 elif event.key == pygame.K_UP:

                     frog.y-=20

                     if carry_artifact != []:

                         carry_artifact[0].y -= 20

        #Quit if you die three times
             if life==0:
                 done = False

                 pygame.quit()

                 sys.exit()

                 

                 



        #Code for collision events--------------------
        #dagger collide lists
        hitdagger=frog.collidelist(daggerlist)

        hitdagger1=frog.collidelist(dagger1list)
  
        hitdagger2= frog.collidelist(dagger2list)
        
        #stone collide lists
        hitstone=frog.collidelist(stonelist)

        hitstone1=frog.collidelist(stone1list)

        #coffin collide lists
        hitcoffin=frog.collidelist(coffinlist)

        #mummy collide list
        hitmummy=frog.collidelist(mummylist)

        #artifact collide list
        hitartifact = frog.collidelist(artifactlist)


    
    
        #frog and stone

        if hitstone != -1:

            frog.x += 5

            if carry_artifact != []:

                carry_artifact[0].x+=5

        elif hitstone1 != -1:

            frog.x -= 4

            if carry_artifact != []:

                carry_artifact[0].x -=4
 
        #frog and dagger

        if hitdagger!= -1:
            
            frog.x = 250

            frog.y = 680

            life -= 1

            


        if hitdagger1==0:
            
            frog.x = 250

            frog.y = 680

            life -= 1

            

        if hitdagger2 != -1:
            
            frog.x = 250

            frog.y = 680

            life -= 1

            

        #frog and coffin
        
        for i in range(8):
            mummylist[i].x += mummyxposchange[i]

        if hitcoffin != -1:
            
            if coffin_choose[hitcoffin]==0:

                mummyxposchange[hitcoffin] = mummyx_change[hitcoffin]                
                                
                
            elif coffin_choose[hitcoffin]==1:
                
                artifactlist[hitcoffin].x = artifactx_pos[hitcoffin]
                artifactlist[hitcoffin].y = artifacty_pos[hitcoffin]

                coffin_choose[hitcoffin] = 2

        #frog and artifact
                
        if hitartifact != -1 and carry_artifact == []:

            carry_artifact.append(artifactlist[hitartifact])


        #leaving artifact at the top
        if carry_artifact != []:
            if carry_artifact[0].y <= 30:
                carry_artifact[0].y = 10
                
                del carry_artifact[0]
                score += 1

        

        
        
        

        #frog and mummy
        if hitmummy != -1:
            frog.x = 250

            frog.y = 680

            if carry_artifact != []:
                
                carry_artifact[0].x = 600
                carry_artifact[0].y = 250
                
                del carry_artifact[0]

                coffin_choose[hitartifact] = 1

                life -=1

        #frog and not going over bounderies
        if frog.x <=0 or frog.x>=500 :

            frog.x = 250

            frog.y = 680

            if carry_artifact != []:
                
                carry_artifact[0].x = 600
                carry_artifact[0].y = 250
                
                del carry_artifact[0]

                coffin_choose[hitartifact] = 1

                life -=1

        #frog and not going on stone
        if hitstone == -1 and hitstone1 == -1:
            
            if frog.y >55 and frog.y<140:
                frog.x = 250

                frog.y = 680

                if carry_artifact != []:

                    carry_artifact[0].x = 600
                    carry_artifact[0].y = 250
                
                    del carry_artifact[0]

                    coffin_choose[hitartifact] = 1

                life -=1
                    
        font = pygame.font.Font('freesansbold.ttf', 20)

        text = "Score:" + str(score)

        text = font.render(text, True, colordagger, colorstone) 

        textRect = text.get_rect()

        textRect.center = (50,680 )
       
                
                
        
        
        #for dagger restart on screen
        for block in daggerlist:

            

            block.x = (block.x+8)%700



        for block1 in dagger1list:

            

            block1.x = (block1.x-5)%700

            

        for block2 in dagger2list:

            

            block2.x = (block2.x+10)%700

        #stone to restart screen
        for block4 in stonelist:

            block4.x = (block4.x+5)%700



        for block5 in stone1list:

            block5.x = (block5.x-4)%700


        
        #mummy to restart screen
        for block6 in mummylist:

            block6.x = (block6.x)%500

        #Draw score on screen





          
        #Redraw screen
        main_surface.fill((0,0,0))


        #Drawing codes-----------------------------------

        #Stones
        pygame.draw.rect(main_surface,colorstone,stone)
        pygame.draw.rect(main_surface,colorstone,stone1)
        pygame.draw.rect(main_surface,colorstone,stone2)
        pygame.draw.rect(main_surface,colorstone,stone3)
        pygame.draw.rect(main_surface,colorstone,stone4)
        pygame.draw.rect(main_surface,colorstone,stone5)
        
        

        #Daggers
        pygame.draw.rect(main_surface,colordagger,dagger)
        pygame.draw.rect(main_surface,colordagger,dagger1)
        pygame.draw.rect(main_surface,colordagger,dagger2)
        pygame.draw.rect(main_surface,colordagger,dagger3)
        pygame.draw.rect(main_surface,colordagger,dagger4)
        pygame.draw.rect(main_surface,colordagger,dagger5)
        


        #Mummys
        pygame.draw.rect(main_surface,colormummy,mummy)
        pygame.draw.rect(main_surface,colormummy,mummy1)
        pygame.draw.rect(main_surface,colormummy,mummy2)
        pygame.draw.rect(main_surface,colormummy,mummy3)
        pygame.draw.rect(main_surface,colormummy,mummy4)
        pygame.draw.rect(main_surface,colormummy,mummy5)
        pygame.draw.rect(main_surface,colormummy,mummy6)
        pygame.draw.rect(main_surface,colormummy,mummy7)
        
        

        #Frog
        pygame.draw.rect(main_surface,colorfrog,frog)
        

        #artifact
        pygame.draw.rect(main_surface,colorartifact,artifact)
        pygame.draw.rect(main_surface,colorartifact,artifact1)
        pygame.draw.rect(main_surface,colorartifact,artifact2)
        pygame.draw.rect(main_surface,colorartifact,artifact3)
        pygame.draw.rect(main_surface,colorartifact,artifact4)
        pygame.draw.rect(main_surface,colorartifact,artifact5)
        pygame.draw.rect(main_surface,colorartifact,artifact6)
        pygame.draw.rect(main_surface,colorartifact,artifact7)


        #Coffins?
        pygame.draw.rect(main_surface,colorcoffin,coffin)
        pygame.draw.rect(main_surface,colorcoffin,coffin1)
        pygame.draw.rect(main_surface,colorcoffin,coffin2)
        pygame.draw.rect(main_surface,colorcoffin,coffin3)
        pygame.draw.rect(main_surface,colorcoffin,coffin4)
        pygame.draw.rect(main_surface,colorcoffin,coffin5)
        pygame.draw.rect(main_surface,colorcoffin,coffin6)
        pygame.draw.rect(main_surface,colorcoffin,coffin7)

       
        
         #text            
        main_surface.blit(text, textRect)

        pygame.display.update()
       


        #flip the drawn surface onto screen
        pygame.display.flip()

        #speed
        time.sleep(0.05)

if __name__=='__main__':

    main()
        


        






    

    




    





    







    

    




    
